// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smartshop.Data.DataContext;

#nullable disable

namespace smartshop.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "af6fa21b-ee6a-4381-a607-fafd97817cd5",
                            ConcurrencyStamp = "2e0dd283-638e-41aa-8db5-31c3a6b16864",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = "ef9acd24-7668-4fa2-a17a-a901cacf2bc5",
                            ConcurrencyStamp = "8b1cdce1-33ce-4aaa-8c06-326c3a8b4529",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d82400fc-2f38-463a-85b8-1c93b0a2b4dc",
                            ConcurrencyStamp = "44a02121-a995-421c-9066-36c6eea48e4e",
                            Name = "Accountant",
                            NormalizedName = "ACCOUNTANT"
                        },
                        new
                        {
                            Id = "21bc61f7-6ada-4baf-97ef-58ab9e68f278",
                            ConcurrencyStamp = "a5956249-741c-4be6-8549-cf3dfe30957d",
                            Name = "Purchase Management",
                            NormalizedName = "PURCHASE MANAGEMENT"
                        },
                        new
                        {
                            Id = "93f4492e-9735-4a65-9836-c0d21af4df6c",
                            ConcurrencyStamp = "99291139-0b94-4140-9200-552e18eb3053",
                            Name = "Stock Inventory",
                            NormalizedName = "STOCK INVENTORY"
                        },
                        new
                        {
                            Id = "465246a7-04c4-4097-a74e-66cdc924fa3c",
                            ConcurrencyStamp = "1138d9b8-0a07-422d-b3ec-9783f0de1846",
                            Name = "Product Management",
                            NormalizedName = "PRODUCT MANAGEMENT"
                        },
                        new
                        {
                            Id = "acad8c2e-ce47-48bb-a5b1-97a5481583ef",
                            ConcurrencyStamp = "6fa10a26-a700-4fab-a998-6929b7278f14",
                            Name = "Sales Management",
                            NormalizedName = "SALES MANAGEMENT"
                        },
                        new
                        {
                            Id = "79e7a25a-816f-4c53-a805-12e96c0173af",
                            ConcurrencyStamp = "3597de23-5784-489e-91df-7c727251bfcc",
                            Name = "HR Management",
                            NormalizedName = "HR MANAGEMENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "6c3957d2-86ca-4ed9-86a4-5a87dcbcc71a",
                            RoleId = "af6fa21b-ee6a-4381-a607-fafd97817cd5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EquationComponent")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EquationComponent = 1,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            EquationComponent = 1,
                            Name = "Account Receivable"
                        },
                        new
                        {
                            Id = 3,
                            EquationComponent = 1,
                            Name = "Product"
                        },
                        new
                        {
                            Id = 4,
                            EquationComponent = 2,
                            Name = "Account Payable"
                        },
                        new
                        {
                            Id = 5,
                            EquationComponent = 2,
                            Name = "Salary Payable"
                        },
                        new
                        {
                            Id = 6,
                            EquationComponent = 3,
                            Name = "Capital"
                        },
                        new
                        {
                            Id = 7,
                            EquationComponent = 3,
                            Name = "Drawing"
                        },
                        new
                        {
                            Id = 8,
                            EquationComponent = 3,
                            Name = "Revenues"
                        },
                        new
                        {
                            Id = 9,
                            EquationComponent = 3,
                            Name = "Expense"
                        });
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.AccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("HeadTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("HeadTransactionId");

                    b.ToTable("AccountTransactions");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.DueCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PreviouseDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("SaleId");

                    b.ToTable("DueCollections");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.DuePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PaymentSlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("DuePayments");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Head", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("HeadType")
                        .HasColumnType("int");

                    b.Property<bool>("IsConstant")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Heads");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.HeadTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("DueCollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DuePaymentId")
                        .HasColumnType("int");

                    b.Property<int>("HeadId")
                        .HasColumnType("int");

                    b.Property<int?>("IncomeExpenseId")
                        .HasColumnType("int");

                    b.Property<int?>("InvestorTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleReturnId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("purchaseId")
                        .HasColumnType("int");

                    b.Property<int?>("purchaseReturnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeadId");

                    b.ToTable("HeadTransactions");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.IncomeExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("HeadId")
                        .HasColumnType("int");

                    b.Property<bool>("Income")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("HeadId");

                    b.ToTable("IncomeExpenses");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Investor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id");

                    b.ToTable("Investors");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.InvestorTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InvestorId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("InvestorId");

                    b.ToTable("InvestorTransactions");
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoPublicId")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Objective")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WebAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "N/A",
                            ContactNo = "12345678912",
                            CreatedAt = new DateTime(2022, 10, 7, 1, 3, 29, 166, DateTimeKind.Utc).AddTicks(5847),
                            Email = "sunit@gmail.com",
                            Name = "Super Admin",
                            WebAddress = "N/A"
                        });
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.BusinessDeactive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReActivateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessDeactives");
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Test Address",
                            BusinessId = 1,
                            Code = "25",
                            ContactNo = "017xxxxxxxx",
                            Email = "test@gmail.com",
                            Name = "Super Store"
                        });
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.StoreDeactive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReActivateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreDeactives");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Designations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessId = 1,
                            Name = "Admin",
                            Priority = 0
                        });
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 10, 7, 1, 3, 29, 172, DateTimeKind.Utc).AddTicks(2969),
                            CreatedBy = "6c3957d2-86ca-4ed9-86a4-5a87dcbcc71a",
                            CreatedIp = ";;",
                            DesignationId = 1,
                            JoiningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StoreId = 1,
                            UserId = "6c3957d2-86ca-4ed9-86a4-5a87dcbcc71a"
                        });
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.EmployeePersonalInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NationalIdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("EmployeePersonalInfos");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.EmployeeSalaryReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("HouseRent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Insurance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MealAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MedicalAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ProvidenceFund")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TransportAllowance")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSalaryReviews");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("AlertQty")
                        .HasColumnType("double");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .HasColumnType("longtext");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.UnitVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Qnty")
                        .HasColumnType("double");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("UnitVariations");
                });

            modelBuilder.Entity("smartshop.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DiscountType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Overhead")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseManagement.PurchaseProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BonusQty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TradePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitVariationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("UnitVariationId");

                    b.ToTable("PurchaseProducts");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseManagement.PurchaseReturnProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PurchaseProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseProductId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseReturnProducts");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("smartshop.Entities.SaleReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleReturns");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Overhead")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.SaleProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Qnty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("UnitVariationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("StockId");

                    b.HasIndex("UnitVariationId");

                    b.ToTable("SaleProducts");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.SaleReturnProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SaleProductId")
                        .HasColumnType("int");

                    b.Property<int>("SaleReturnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleProductId");

                    b.HasIndex("SaleReturnId");

                    b.ToTable("SaleReturnProducts");
                });

            modelBuilder.Entity("smartshop.Entities.Settings.BusinessConfigure", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CustomerIdPrefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DueCollectionPrefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DuePaymentPrefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PurchaseInvoicePrefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SalesInvoicePrefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SupplierIdPrefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("BusinessConfigures");
                });

            modelBuilder.Entity("smartshop.Entities.Stocks.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("StockQty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("TradePrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("smartshop.Entities.Stocks.StockDamage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedIp")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("DamageQnty")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("StockDamages");
                });

            modelBuilder.Entity("smartshop.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SupId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("smartshop.Entities.Common.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoPublicId")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "6c3957d2-86ca-4ed9-86a4-5a87dcbcc71a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8ad8889-2c96-491c-adf2-c6bcbf5eb01a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIW0zJqeqXBeC5aNsf/DSCRaFQQfDEMiIG3kkB43jQk0mKOEam20OoCbVhyft8/3/Q==",
                            PhoneNumber = "01740857126",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c151b794-a6d7-4dcd-8a21-f9a8d7e14079",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FirstName = "Super",
                            IsActive = true,
                            IsAdmin = true,
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.AccountTransaction", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.Account", "Account")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Accounting.HeadTransaction", "HeadTransaction")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("HeadTransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("HeadTransaction");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.BankAccount", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.Head", "Head")
                        .WithOne("BankAccount")
                        .HasForeignKey("smartshop.Entities.Accounting.BankAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.DueCollection", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.BankAccount", "BankAccount")
                        .WithMany("DueCollections")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.SalesManagement.Sale", "Sale")
                        .WithMany("DueCollections")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.DuePayment", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.BankAccount", "BankAccount")
                        .WithMany("DuePayments")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Purchase", "Purchase")
                        .WithMany("DuePayments")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Head", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithMany("Heads")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.HeadTransaction", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.Head", "Head")
                        .WithMany("HeadTransactions")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.IncomeExpense", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.BankAccount", "BankAccount")
                        .WithMany("IncomeExpenses")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Accounting.Head", "Head")
                        .WithMany("IncomeExpenses")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Investor", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.Head", "Head")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.InvestorTransaction", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.BankAccount", "BankAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Accounting.Investor", "Investor")
                        .WithMany("Transactions")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Investor");
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.BusinessDeactive", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithMany("BusinessDeactives")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.Store", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithMany("Stores")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.StoreDeactive", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Store", "Store")
                        .WithMany("StoreDeactives")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.Designation", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithMany("Designations")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.Employee", b =>
                {
                    b.HasOne("smartshop.Entities.HumanResource.Designation", "Designation")
                        .WithMany("Employees")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Businesses.Store", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Common.ApplicationUser", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.EmployeePersonalInfo", b =>
                {
                    b.HasOne("smartshop.Entities.Common.ApplicationUser", "ApplicationUser")
                        .WithOne("EmployeePersonalInfo")
                        .HasForeignKey("smartshop.Entities.HumanResource.EmployeePersonalInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.EmployeeSalaryReview", b =>
                {
                    b.HasOne("smartshop.Entities.HumanResource.Employee", "Employee")
                        .WithMany("EmployeeSalaryReviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Brand", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithMany("Brands")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Category", b =>
                {
                    b.HasOne("smartshop.Entities.ProductManagement.Group", "Group")
                        .WithMany("Categories")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Group", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithMany("Groups")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Product", b =>
                {
                    b.HasOne("smartshop.Entities.ProductManagement.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.ProductManagement.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Accounting.Head", "Head")
                        .WithOne("Product")
                        .HasForeignKey("smartshop.Entities.ProductManagement.Product", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.ProductManagement.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Head");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Unit", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithMany("Units")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.UnitVariation", b =>
                {
                    b.HasOne("smartshop.Entities.ProductManagement.Unit", "Unit")
                        .WithMany("UnitVariations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("smartshop.Entities.Purchase", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.BankAccount", "BankAccount")
                        .WithMany("Purchases")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Businesses.Store", "Store")
                        .WithMany("Purchases")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseManagement.PurchaseProduct", b =>
                {
                    b.HasOne("smartshop.Entities.ProductManagement.Product", "Product")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.ProductManagement.UnitVariation", "UnitVariation")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("UnitVariationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");

                    b.Navigation("UnitVariation");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseManagement.PurchaseReturnProduct", b =>
                {
                    b.HasOne("smartshop.Entities.PurchaseManagement.PurchaseProduct", "PurchaseProduct")
                        .WithMany("PurchaseReturnProducts")
                        .HasForeignKey("PurchaseProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.PurchaseReturn", "PurchaseReturn")
                        .WithMany("PurchaseReturnProducts")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseProduct");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseReturn", b =>
                {
                    b.HasOne("smartshop.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("smartshop.Entities.SaleReturn", b =>
                {
                    b.HasOne("smartshop.Entities.SalesManagement.Sale", "Sale")
                        .WithMany("SaleReturns")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.Customer", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.Head", "Head")
                        .WithOne("Customer")
                        .HasForeignKey("smartshop.Entities.SalesManagement.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.Sale", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.BankAccount", "BankAccount")
                        .WithMany("Sales")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.SalesManagement.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Businesses.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.SaleProduct", b =>
                {
                    b.HasOne("smartshop.Entities.SalesManagement.Sale", "Sale")
                        .WithMany("SaleProducts")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Stocks.Stock", "Stock")
                        .WithMany("SaleProducts")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.ProductManagement.UnitVariation", "UnitVariation")
                        .WithMany("SaleProducts")
                        .HasForeignKey("UnitVariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("Stock");

                    b.Navigation("UnitVariation");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.SaleReturnProduct", b =>
                {
                    b.HasOne("smartshop.Entities.SalesManagement.SaleProduct", "SaleProduct")
                        .WithMany("SaleReturnProducts")
                        .HasForeignKey("SaleProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.SaleReturn", "SaleReturn")
                        .WithMany("SaleReturnProducts")
                        .HasForeignKey("SaleReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleProduct");

                    b.Navigation("SaleReturn");
                });

            modelBuilder.Entity("smartshop.Entities.Settings.BusinessConfigure", b =>
                {
                    b.HasOne("smartshop.Entities.Businesses.Business", "Business")
                        .WithOne("BusinessConfigure")
                        .HasForeignKey("smartshop.Entities.Settings.BusinessConfigure", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("smartshop.Entities.Stocks.Stock", b =>
                {
                    b.HasOne("smartshop.Entities.ProductManagement.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smartshop.Entities.Businesses.Store", "Store")
                        .WithMany("Stocks")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("smartshop.Entities.Stocks.StockDamage", b =>
                {
                    b.HasOne("smartshop.Entities.Stocks.Stock", "Stock")
                        .WithMany("StockDamages")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("smartshop.Entities.Supplier", b =>
                {
                    b.HasOne("smartshop.Entities.Accounting.Head", "Head")
                        .WithOne("Supplier")
                        .HasForeignKey("smartshop.Entities.Supplier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Head");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Account", b =>
                {
                    b.Navigation("AccountTransactions");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.BankAccount", b =>
                {
                    b.Navigation("DueCollections");

                    b.Navigation("DuePayments");

                    b.Navigation("IncomeExpenses");

                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Head", b =>
                {
                    b.Navigation("BankAccount");

                    b.Navigation("Customer");

                    b.Navigation("HeadTransactions");

                    b.Navigation("IncomeExpenses");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.HeadTransaction", b =>
                {
                    b.Navigation("AccountTransactions");
                });

            modelBuilder.Entity("smartshop.Entities.Accounting.Investor", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.Business", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("BusinessConfigure");

                    b.Navigation("BusinessDeactives");

                    b.Navigation("Designations");

                    b.Navigation("Groups");

                    b.Navigation("Heads");

                    b.Navigation("Stores");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("smartshop.Entities.Businesses.Store", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Purchases");

                    b.Navigation("Sales");

                    b.Navigation("Stocks");

                    b.Navigation("StoreDeactives");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.Designation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("smartshop.Entities.HumanResource.Employee", b =>
                {
                    b.Navigation("EmployeeSalaryReviews");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Group", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Product", b =>
                {
                    b.Navigation("PurchaseProducts");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.Unit", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("UnitVariations");
                });

            modelBuilder.Entity("smartshop.Entities.ProductManagement.UnitVariation", b =>
                {
                    b.Navigation("PurchaseProducts");

                    b.Navigation("SaleProducts");
                });

            modelBuilder.Entity("smartshop.Entities.Purchase", b =>
                {
                    b.Navigation("DuePayments");

                    b.Navigation("PurchaseProducts");

                    b.Navigation("PurchaseReturns");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseManagement.PurchaseProduct", b =>
                {
                    b.Navigation("PurchaseReturnProducts");
                });

            modelBuilder.Entity("smartshop.Entities.PurchaseReturn", b =>
                {
                    b.Navigation("PurchaseReturnProducts");
                });

            modelBuilder.Entity("smartshop.Entities.SaleReturn", b =>
                {
                    b.Navigation("SaleReturnProducts");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.Sale", b =>
                {
                    b.Navigation("DueCollections");

                    b.Navigation("SaleProducts");

                    b.Navigation("SaleReturns");
                });

            modelBuilder.Entity("smartshop.Entities.SalesManagement.SaleProduct", b =>
                {
                    b.Navigation("SaleReturnProducts");
                });

            modelBuilder.Entity("smartshop.Entities.Stocks.Stock", b =>
                {
                    b.Navigation("SaleProducts");

                    b.Navigation("StockDamages");
                });

            modelBuilder.Entity("smartshop.Entities.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("smartshop.Entities.Common.ApplicationUser", b =>
                {
                    b.Navigation("EmployeePersonalInfo");

                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
